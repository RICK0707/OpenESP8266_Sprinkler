<VisualMicro>
  <Program Name="interval_program_v2" Ext=".ino" Location="d:\Users\pbecc\OneDrive\Arduino\OpenSprinkler\OpenSprinkler_Arduino_V_2_0_1\interval_program_v2">
    <Compile IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560" ReCompileIfSourceIsNewer="1" SketchName="interval_program_v2" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 100;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="d:\Program Files\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="d:\Program Files\Arduino\hardware\arduino\avr\variants\mega" McuIdePath="d:\Program Files\Arduino" McuSketchBookPath="d:\users\pbecc\onedrive\Arduino" name="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.4="0x2341" pid.4="0x0210" vid.5="0x2341" pid.5="0x0242" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="d:\Program Files\Arduino" build.system.path="d:\Program Files\Arduino\hardware\arduino\avr\system" runtime.ide.version="10605" target_package="arduino" target_platform="avr" runtime.hardware.path="d:\Program Files\Arduino\hardware\arduino" originalid="mega" intellisense.tools.path="{runtime.tools.avr-gcc.path}/" intellisense.include.paths="{intellisense.tools.path}avr/include/;{intellisense.tools.path}/avr/include/avr/;{intellisense.tools.path}lib\gcc\avr\4.8.1\include" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}/hardware/arduino/avr/bootloaders/{bootloader.file}&quot;" version="1.6.8" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="{compiler.warning_flags} -Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{build.path}/{archive_file}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" recipe.hooks.objcopy.postobjcopy.1.pattern="cmd /C &quot;echo  {build.project_name} %DATE% %TIME% &gt;&gt;d:\users\pbecc\onedrive\arduino\log.txt&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="D:\Program Files\VisualStudio\Common7\IDE\Extensions\sgm4paqd.qev\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="stk500v1" arduinoasisp.speed="19200" arduinoasisp.program.protocol="stk500v1" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" runtime.tools.avrdude.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.0.1-arduino5.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avr-gcc.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-4.8.1-arduino5.path="d:\Program Files\Arduino\hardware\tools\avr" runtime.tools.esptool.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.6" runtime.tools.esptool-0.4.6.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\esptool\0.4.6" runtime.tools.mkspiffs.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.1.2" runtime.tools.mkspiffs-0.1.2.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\mkspiffs\0.1.2" runtime.tools.xtensa-lx106-elf-gcc.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" runtime.tools.xtensa-lx106-elf-gcc-1.20.0-26-gb404fb9-2.path="d:\Users\pbecc\AppData\Local\arduino15\packages\esp8266\tools\xtensa-lx106-elf-gcc\1.20.0-26-gb404fb9-2" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" ide.hint="For use with Arduino.cc 1.6.2+ ide" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.version="10607" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference\arduino.cc\en\Reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="arduino16x" location.sketchbook="d:\users\pbecc\onedrive\Arduino" build.core.vmresolved="d:\Program Files\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="d:\Program Files\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="d:\Program Files\Arduino\hardware\arduino\avr" vm.core.include="arduino.h" vm.boardsource.path="d:\Program Files\Arduino\hardware\arduino\avr" runtime.platform.path="d:\Program Files\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" build.variant.vmresolved="d:\Program Files\Arduino\hardware\arduino\avr\variants\mega" build.architecture="avr" vmresolved.compiler.path="d:\Program Files\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="d:\Program Files\Arduino\hardware\tools\avr" vm.runtime.compiler.showwarnings="false" vm.last.buildpath="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560" PreProcessor.HeaderCount="1" PreProcessor.PrototypeCount="38" vm.last.preproc.file.0.file="server.ino" vm.last.preproc.file.0.offset="2162" vm.last.preproc.file.0.length="25887" vm.last.preproc.file.0.prefix_lines="0" serial.port.file="COM6" serial.port="COM6" serial.port.num="6" build.source.path="d:\Users\pbecc\OneDrive\Arduino\OpenSprinkler\OpenSprinkler_Arduino_V_2_0_1\interval_program_v2\interval_program_v2.ino" extra.time.local="43190139" vm_all_includes=" -I&quot;d:\Users\pbecc\OneDrive\Arduino\OpenSprinkler\OpenSprinkler_Arduino_V_2_0_1\interval_program_v2&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\cores\arduino&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\variants\mega&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\DS1307RTC&quot;  -I&quot;d:\Program Files\Arduino\libraries\Ethernet\src&quot;  -I&quot;d:\Program Files\Arduino\libraries\LiquidCrystal\src&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\MemoryFree&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries\SPI&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\Time&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\TimeAlarms&quot;  -I&quot;D:\Program Files\VisualStudio\Common7\IDE\Extensions\sgm4paqd.qev\Micro Platforms\default\debuggers\VM_DBG&quot;  -I&quot;d:\Program Files\Arduino\libraries\WiFi\src&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries\Wire&quot;  -I&quot;d:\Program Files\Arduino\libraries&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries&quot;  -I&quot;D:\Program Files\VisualStudio\Common7\IDE\Extensions\sgm4paqd.qev\Micro Platforms\default\debuggers&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries&quot; " vm_core_includes=" -I&quot;d:\Users\pbecc\OneDrive\Arduino\OpenSprinkler\OpenSprinkler_Arduino_V_2_0_1\interval_program_v2&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\cores\arduino&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\variants\mega&quot; " includes=" -I&quot;d:\Users\pbecc\OneDrive\Arduino\OpenSprinkler\OpenSprinkler_Arduino_V_2_0_1\interval_program_v2&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\cores\arduino&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\variants\mega&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\DS1307RTC&quot;  -I&quot;d:\Program Files\Arduino\libraries\Ethernet\src&quot;  -I&quot;d:\Program Files\Arduino\libraries\LiquidCrystal\src&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\MemoryFree&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries\SPI&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\Time&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries\TimeAlarms&quot;  -I&quot;D:\Program Files\VisualStudio\Common7\IDE\Extensions\sgm4paqd.qev\Micro Platforms\default\debuggers\VM_DBG&quot;  -I&quot;d:\Program Files\Arduino\libraries\WiFi\src&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries\Wire&quot;  -I&quot;d:\Program Files\Arduino\libraries&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries&quot;  -I&quot;D:\Program Files\VisualStudio\Common7\IDE\Extensions\sgm4paqd.qev\Micro Platforms\default\debuggers&quot;  -I&quot;d:\users\pbecc\onedrive\Arduino\libraries&quot;  -I&quot;d:\Program Files\Arduino\hardware\arduino\avr\libraries\Wire\utility&quot;" build.path="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560" build.project_name="interval_program_v2" build.variant.path="d:\Program Files\Arduino\hardware\arduino\avr\variants\mega" build.core.path="d:\Program Files\Arduino\hardware\arduino\avr\cores\arduino" archive_file="core.a" archive_file_path="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\core.a" build.path_sketch="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560" build.path_core="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560" build.path_libraries="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560" object_file="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\lcd_mio.cpp.o" source_file="d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\lcd_mio.cpp" object_files=" &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\DS1307RTC\DS1307RTC.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\Dhcp.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\Dns.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\Ethernet.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\EthernetClient.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\EthernetServer.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\EthernetUdp.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\utility\socket.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Ethernet\utility\w5100.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\LiquidCrystal\LiquidCrystal.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\MemoryFree\MemoryFree.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\SPI\SPI.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Time\DateStrings.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Time\Time.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\TimeAlarms\TimeAlarms.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\VM_DBG\VM_mem_check.c.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\VM_DBG\VM_DBG.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\WiFi.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\WiFiClient.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\WiFiServer.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\WiFiUdp.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\utility\server_drv.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\utility\spi_drv.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\WiFi\utility\wifi_drv.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Wire\Wire.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\Wire\utility\twi.c.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\interval_program_v2.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\eeprom_mio.cpp.o&quot;  &quot;d:\Users\pbecc\AppData\Local\V.Micro\Arduino\Builds\interval_program_v2\mega_atmega2560\lcd_mio.cpp.o&quot; " />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="interval_program_v2.ino, riga 150" Id="b1d1b776-d4d6-41be-85dd-2a3328db8f83" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\interval_program_v2.ino" FileLine="150" FileColumn="1" FunctionName="setup()" FunctionLineOffset="5" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b1d1b776-d4d6-41be-85dd-2a3328db8f83'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>143	// ======================
144	// Arduino Setup Function
145	// ======================
146	void setup() { 
147		
148		
149		
--&gt;150	  svc.begin();          // OpenSprinkler init
151	  svc.options_setup();  // Setup options
152	  pd.init();            // ProgramData init
153	
154	  // calculate http port number
155	  myport = (int)(svc.options[OPTION_HTTPPORT_1].value&lt;&lt;8) + (int)svc.options[OPTION_HTTPPORT_0].value;
156	
157	  setSyncInterval(RTC_SYNC_INTERVAL);  // RTC sync interval: 15 minutes
158	  // if rtc exists, sets it as time sync source
159	  setSyncProvider(svc.status.has_rtc ? RTC.get : NULL);
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="OpenSprinklerGen2.ino, riga 159" Id="ef4e42d7-6eb6-49b9-97d7-1ff2f887c485" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="159" FileColumn="1" FunctionName="begin()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ef4e42d7-6eb6-49b9-97d7-1ff2f887c485'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>152	
153	// OpenSprinkler init function
154	void OpenSprinkler::begin() {
155	
156	  //===== Shift Register =====//
157	  /*
158	  // shift register setup
--&gt;159	   pinMode(PIN_SR_LATCH, OUTPUT);
160	   pinMode(PIN_SR_OE, OUTPUT);
161	   pinMode(PIN_SR_CLOCK, OUTPUT);
162	   pinMode(PIN_SR_DATA,  OUTPUT);
163	   
164	   digitalWrite(PIN_SR_LATCH, HIGH);
165	   // pull shift register OE high to disable output
166	   digitalWrite(PIN_SR_OE, HIGH);
167	   */
168	
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="OpenSprinklerGen2.ino, riga 183" Id="0a11ec54-cbca-4fbb-a8aa-4af2e8969419" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="183" FileColumn="1" FunctionName="begin()" FunctionLineOffset="30" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='0a11ec54-cbca-4fbb-a8aa-4af2e8969419'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>176	  pinMode(PIN_STN_S6, OUTPUT); 
177	  pinMode(PIN_STN_S7, OUTPUT); 
178	  pinMode(PIN_STN_S8, OUTPUT); 
179	  //===========================//
180	
181	  // Reset all stations
182	  clear_all_station_bits();
--&gt;183	  apply_all_station_bits();
184	
185	  //===== Shift Register =====//
186	  /*  
187	   // pull shift register OE low to enable output
188	   digitalWrite(PIN_SR_OE, LOW);
189	   */
190	#ifdef LCD
191	  // set PWM frequency for LCD
192	  TCCR1B = 0x01;
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="OpenSprinklerGen2.ino, riga 234" Id="05b07013-8185-4093-a6c7-9a7fb229f75f" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="234" FileColumn="1" FunctionName="begin()" FunctionLineOffset="81" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='05b07013-8185-4093-a6c7-9a7fb229f75f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>227	    B01000,
228	    B10101,
229	    B00001,
230	    B00101,
231	    B00101,
232	    B10101
233	  };
--&gt;234	  lcd.createChar(1, lcd_custom_char);  
235	  lcd_custom_char[1]=0;
236	  lcd_custom_char[2]=0;
237	  lcd_custom_char[3]=1;    
238	  lcd.createChar(0, lcd_custom_char); 
239	
240	  // set rf data pin
241	  pinMode(PIN_RF_DATA, OUTPUT);
242	  digitalWrite(PIN_RF_DATA, LOW);
243	
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="OpenSprinklerGen2.ino, riga 241" Id="3ba17cd9-32cb-4aec-85c2-0f8bfeaa8774" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="241" FileColumn="1" FunctionName="begin()" FunctionLineOffset="88" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3ba17cd9-32cb-4aec-85c2-0f8bfeaa8774'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>234	  lcd.createChar(1, lcd_custom_char);  
235	  lcd_custom_char[1]=0;
236	  lcd_custom_char[2]=0;
237	  lcd_custom_char[3]=1;    
238	  lcd.createChar(0, lcd_custom_char); 
239	
240	  // set rf data pin
--&gt;241	  pinMode(PIN_RF_DATA, OUTPUT);
242	  digitalWrite(PIN_RF_DATA, LOW);
243	
244	  // ===== Freetronics LCD Shield =====
245	  /*
246	  // set button pins
247	   // enable internal pullup
248	   pinMode(PIN_BUTTON_1, INPUT);
249	   pinMode(PIN_BUTTON_2, INPUT);
250	   pinMode(PIN_BUTTON_3, INPUT);    
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="interval_program_v2.ino, riga 151" Id="c06b7bef-fe6a-42ad-a521-19234943d567" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\interval_program_v2.ino" FileLine="151" FileColumn="1" FunctionName="setup()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c06b7bef-fe6a-42ad-a521-19234943d567'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>144	// Arduino Setup Function
145	// ======================
146	void setup() { 
147		
148		
149		
150	  svc.begin();          // OpenSprinkler init
--&gt;151	  svc.options_setup();  // Setup options
152	  pd.init();            // ProgramData init
153	
154	  // calculate http port number
155	  myport = (int)(svc.options[OPTION_HTTPPORT_1].value&lt;&lt;8) + (int)svc.options[OPTION_HTTPPORT_0].value;
156	
157	  setSyncInterval(RTC_SYNC_INTERVAL);  // RTC sync interval: 15 minutes
158	  // if rtc exists, sets it as time sync source
159	  setSyncProvider(svc.status.has_rtc ? RTC.get : NULL);
160	  delay(500);
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="OpenSprinklerGen2.ino, riga 412" Id="3bc610f9-26de-454d-8916-d73412df47eb" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="412" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3bc610f9-26de-454d-8916-d73412df47eb'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>405	  byte by = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_RESET));
406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
408	    //======== Reset EEPROM data ========
409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
--&gt;412	
413	    lcd_print_line_clear_pgm(PSTR("Resetting EEPROM"), 0);
414	    lcd_print_line_clear_pgm(PSTR("Please Wait..."), 1);  
415	
416	    int i, sn;
417	    for(i=ADDR_EEPROM_STN_NAMES; i&lt;INT_EEPROM_SIZE; i++) {
418	      eeprom_write_byte((unsigned char *) i, 0);      
419	    }
420	
421	    // reset station names
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="OpenSprinklerGen2.ino, riga 408" Id="9e40ba05-0512-4051-a5eb-9050959174d0" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="408" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="12" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='9e40ba05-0512-4051-a5eb-9050959174d0'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>401	
402	  // check reset condition: either firmware version has changed, or reset flag is up
403	  byte curr_ver = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION));
404	  if (curr_ver&lt;100) curr_ver = curr_ver*10; // adding a default 0 if version number is the old type
405	  byte by = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_RESET));
406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
--&gt;408	    //======== Reset EEPROM data ========
409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
412	
413	    lcd_print_line_clear_pgm(PSTR("Resetting EEPROM"), 0);
414	    lcd_print_line_clear_pgm(PSTR("Please Wait..."), 1);  
415	
416	    int i, sn;
417	    for(i=ADDR_EEPROM_STN_NAMES; i&lt;INT_EEPROM_SIZE; i++) {
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="OpenSprinklerGen2.ino, riga 409" Id="d0c8d4b9-7612-4df4-8827-523369e66b37" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="409" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d0c8d4b9-7612-4df4-8827-523369e66b37'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>402	  // check reset condition: either firmware version has changed, or reset flag is up
403	  byte curr_ver = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION));
404	  if (curr_ver&lt;100) curr_ver = curr_ver*10; // adding a default 0 if version number is the old type
405	  byte by = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_RESET));
406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
408	    //======== Reset EEPROM data ========
--&gt;409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
412	
413	    lcd_print_line_clear_pgm(PSTR("Resetting EEPROM"), 0);
414	    lcd_print_line_clear_pgm(PSTR("Please Wait..."), 1);  
415	
416	    int i, sn;
417	    for(i=ADDR_EEPROM_STN_NAMES; i&lt;INT_EEPROM_SIZE; i++) {
418	      eeprom_write_byte((unsigned char *) i, 0);      
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="interval_program_v2.ino, riga 152" Id="461cd618-c389-4937-8932-ce2eecdecc25" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\interval_program_v2.ino" FileLine="152" FileColumn="1" FunctionName="setup()" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='461cd618-c389-4937-8932-ce2eecdecc25'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>145	// ======================
146	void setup() { 
147		
148		
149		
150	  svc.begin();          // OpenSprinkler init
151	  svc.options_setup();  // Setup options
--&gt;152	  pd.init();            // ProgramData init
153	
154	  // calculate http port number
155	  myport = (int)(svc.options[OPTION_HTTPPORT_1].value&lt;&lt;8) + (int)svc.options[OPTION_HTTPPORT_0].value;
156	
157	  setSyncInterval(RTC_SYNC_INTERVAL);  // RTC sync interval: 15 minutes
158	  // if rtc exists, sets it as time sync source
159	  setSyncProvider(svc.status.has_rtc ? RTC.get : NULL);
160	  delay(500);
161	  svc.lcd_print_time(0);  // display time to LCD
</Source>
      </BreakPoint>
      <BreakPoint Index="11" Name="OpenSprinklerGen2.ino, riga 413" Id="2d345dd2-a27b-4f6c-93c8-03195ca81b6c" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="413" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="17" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2d345dd2-a27b-4f6c-93c8-03195ca81b6c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
408	    //======== Reset EEPROM data ========
409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
412	
--&gt;413	    lcd_print_line_clear_pgm(PSTR("Resetting EEPROM"), 0);
414	    lcd_print_line_clear_pgm(PSTR("Please Wait..."), 1);  
415	
416	    int i, sn;
417	    for(i=ADDR_EEPROM_STN_NAMES; i&lt;INT_EEPROM_SIZE; i++) {
418	      eeprom_write_byte((unsigned char *) i, 0);      
419	    }
420	
421	    // reset station names
422	    for(i=ADDR_EEPROM_STN_NAMES, sn=1; i&lt;ADDR_EEPROM_RUNONCE; i+=STATION_NAME_SIZE, sn++) {
</Source>
      </BreakPoint>
      <BreakPoint Index="12" Name="OpenSprinklerGen2.ino, riga 435" Id="7df8a0ed-e25e-4193-9fcb-910ed2cf84ec" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="435" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="39" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='7df8a0ed-e25e-4193-9fcb-910ed2cf84ec'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>428	    // reset master operation bits
429	    for(i=ADDR_EEPROM_MAS_OP; i&lt;ADDR_EEPROM_MAS_OP+(MAX_EXT_BOARDS+1); i++) {
430	      // default master operation bits on
431	      eeprom_write_byte((unsigned char *)i, 0xff);
432	    }
433	    //======== END OF EEPROM RESET CODE ========
434	
--&gt;435	    // restart after resetting EEPROM.
436	    delay(500);
437	    reboot();
438	  } 
439	  else {
440	    options_load(); // load option values
441	    masop_load();   // load master operation bits
442	  }
443	
444	  byte button = button_read(BUTTON_WAIT_NONE);
</Source>
      </BreakPoint>
      <BreakPoint Index="13" Name="OpenSprinklerGen2.ino, riga 403" Id="fda4de9d-37b1-4cdf-9a26-3bb9e0800072" Enabled="1" Message="{curr_ver=?}" CanWriteVars="1" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="403" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fda4de9d-37b1-4cdf-9a26-3bb9e0800072'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>396	
397	void OpenSprinkler::options_setup() {
398	
399	  // add 0.5 second delay to allow EEPROM to stablize
400	  delay(500);
401	
402	  // check reset condition: either firmware version has changed, or reset flag is up
--&gt;403	  byte curr_ver = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION));
404	  if (curr_ver&lt;100) curr_ver = curr_ver*10; // adding a default 0 if version number is the old type
405	  byte by = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_RESET));
406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
408	    //======== Reset EEPROM data ========
409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
412	
</Source>
        <MessageVariables>
          <MessageVariable CanWriteVar="1" Name="curr_ver" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="14" Name="OpenSprinklerGen2.ino, riga 405" Id="f9391b7e-20e1-49c9-abb8-6f12fcb1871c" Enabled="1" Message="{by}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="405" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f9391b7e-20e1-49c9-abb8-6f12fcb1871c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>398	
399	  // add 0.5 second delay to allow EEPROM to stablize
400	  delay(500);
401	
402	  // check reset condition: either firmware version has changed, or reset flag is up
403	  byte curr_ver = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION));
404	  if (curr_ver&lt;100) curr_ver = curr_ver*10; // adding a default 0 if version number is the old type
--&gt;405	  byte by = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_RESET));
406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
408	    //======== Reset EEPROM data ========
409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
412	
413	    lcd_print_line_clear_pgm(PSTR("Resetting EEPROM"), 0);
414	    lcd_print_line_clear_pgm(PSTR("Please Wait..."), 1);  
</Source>
        <MessageVariables>
          <MessageVariable Name="by" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="15" Name="OpenSprinklerGen2.ino, riga 404" Id="b41233e9-5ddc-4ee0-9089-d2e7c62c83f8" Enabled="1" Message="&quot;curr_ver {curr_ver=?}&quot;" CanWriteVars="1" MessageTextType="0" PreProcessedMessage="&quot;curr_ver {0}&quot;" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="404" FileColumn="1" FunctionName="options_setup()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b41233e9-5ddc-4ee0-9089-d2e7c62c83f8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>397	void OpenSprinkler::options_setup() {
398	
399	  // add 0.5 second delay to allow EEPROM to stablize
400	  delay(500);
401	
402	  // check reset condition: either firmware version has changed, or reset flag is up
403	  byte curr_ver = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION));
--&gt;404	  if (curr_ver&lt;100) curr_ver = curr_ver*10; // adding a default 0 if version number is the old type
405	  byte by = eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS + OPTION_RESET));
406	  if (curr_ver != SVC_FW_VERSION || eeprom_read_byte((unsigned char*)(ADDR_EEPROM_OPTIONS+OPTION_RESET))==0xAA) {
407		  eeprom_write_byte( (unsigned char *)(ADDR_EEPROM_OPTIONS + OPTION_FW_VERSION),(byte) 201);
408	    //======== Reset EEPROM data ========
409	    options_save(); // write default option values
410	    eeprom_string_set(ADDR_EEPROM_PASSWORD, DEFAULT_PASSWORD);  // write default password
411	    eeprom_string_set(ADDR_EEPROM_LOCATION, DEFAULT_LOCATION);  // write default location
412	
413	    lcd_print_line_clear_pgm(PSTR("Resetting EEPROM"), 0);
</Source>
        <MessageVariables>
          <MessageVariable CanWriteVar="1" Name="curr_ver" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="16" Name="interval_program_v2.ino, riga 172" Id="5195bd44-7372-450a-bc9d-888c1cc0fe2d" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\interval_program_v2.ino" FileLine="172" FileColumn="1" FunctionName="setup()" FunctionLineOffset="27" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5195bd44-7372-450a-bc9d-888c1cc0fe2d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>165	    svc.status.network_fails = 0;
166	  } 
167	  else  svc.status.network_fails = 1;
168	    delay(500);
169	
170	  svc.apply_all_station_bits(); // reset station bits
171	
--&gt;172	  perform_ntp_sync(now());
173	
174	  svc.lcd_print_time(0);  // display time to LCD
175	   
176	  // ===== Added for Auto Reboot =====
177	  // wdt_enable(WDTO_4S);  // enabled watchdog timer    
178	  if(AUTO_REBOOT)
179	      Alarm.alarmRepeat(REBOOT_HR,REBOOT_MIN,REBOOT_SEC, svc.reboot);      
180	  // ===== Added for Auto Reboot ===== 
181	  
</Source>
      </BreakPoint>
      <BreakPoint Index="17" Name="OpenSprinklerGen2.ino, riga 603" Id="b34543f4-68b8-4b5b-8b5f-5f7621c762c6" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\opensprinklergen2.ino" FileLine="603" FileColumn="1" FunctionName="lcd_print_time(byte line)" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b34543f4-68b8-4b5b-8b5f-5f7621c762c6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>596	  
597	  lcd_print_2digit(minute(t));
598	  lcd_print_pgm(PSTR("  "));
599	  lcd_print_pgm(days_str[weekday_today()]);
600	  lcd_print_pgm(PSTR(" "));
601	  lcd_print_2digit(month(t));
602	  lcd_print_pgm(PSTR("-"));
--&gt;603	  lcd_print_2digit(day(t));
604	}
605	
606	// Print free memory
607	void OpenSprinkler::lcd_print_memory(byte line)
608	{
609	  lcd.setCursor(0, line);
610	  lcd_print_pgm(PSTR("Free RAM:        "));
611	  
612	  lcd.setCursor(10, line);
</Source>
      </BreakPoint>
      <BreakPoint Index="18" Name="interval_program_v2.ino, riga 197" Id="328d85f1-c49a-4166-81c6-1978098c93be" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\users\pbecc\onedrive\arduino\opensprinkler\opensprinkler_arduino_v_2_0_1\interval_program_v2\interval_program_v2.ino" FileLine="197" FileColumn="1" FunctionName="loop()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='328d85f1-c49a-4166-81c6-1978098c93be'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>190	  static unsigned long last_time = 0;
191	  static unsigned long last_minute = 0;
192	  static uint16_t pos;
193	
194	  byte bid, sid, s, pid, seq, bitvalue, mas;
195	  ProgramStruct prog;
196	
--&gt;197	  seq = svc.options[OPTION_SEQUENTIAL].value;
198	  mas = svc.options[OPTION_MASTER_STATION].value;
199	
200	  // ====== Process ETHERNE packets ======
201	  int plen=0;
202	  pos=ether.packetLoop(ether.packetReceive());
203	  if (pos&gt;0) {  // packet received
204	    bfill = ether.tcpOffset();
205	
206	    // ===== Added for W5100 =====
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>